stages:
  - build
  - test
  - security
  - deploy

sast:
  stage: security
  rules:
    - when: manual

secret_detection:
  stage: security

dependency_scanning:
  stage: security
  rules:
    - when: manual

include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

# project stages
image: registry.gitlab.com/edea-dev/ci-runner:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/poetry"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - .cache/poetry
    - venv/
    - .mypy_cache
    - .pytest_cache

default:
  before_script:
    - |
      if [ -f "$HOME/.cargo/env" ];
      then
        source "$HOME/.cargo/env"
        /opt/poetry/bin/poetry install
        source $(/opt/poetry/bin/poetry env info --path)/bin/activate
        python3 --version # For debugging
      else
        echo "~/.cargo/env does not exist, assuming this is an included stage"
      fi

test:
  stage: test
  script:
    - coverage run -m pytest app
    - coverage report
    - coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

typecheck:
  stage: build
  script:
    - mypy -p app

# migrations:
#  script:
#    - pytest --test-alembic

pages:
  stage: deploy
  script:
    - cd doc
    - mdbook build
    - mv book/ ../public/
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
